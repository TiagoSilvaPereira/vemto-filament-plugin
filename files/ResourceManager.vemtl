<?php
<# TEMPLATE VARIABLES #>
<% let crudPluginData = this.crud.pluginConfig %>
<####>

namespace App\Filament\Resources\<$ this.inverseRelationshipModel.name $>Resource\RelationManagers;

use Filament\Forms;
use Filament\Tables;
use Filament\Resources\{
    Form, Table
};
use Filament\Resources\RelationManagers\<$ this.relationshipType $>RelationManager;
<% if(this.crudHasTextInputs) { %>
use Filament\Forms\Components\TextInput;
<% } %>
<% if(this.crud.hasSelectInputs()) { %>
use Filament\Forms\Components\Select;
<% } %>
<% if(this.crud.hasDatetimeInputs()) { %>
use Filament\Forms\Components\DateTimePicker;
<% } %>
<% if(this.crud.hasDateInputs()) { %>
use Filament\Forms\Components\DatePicker;
<% } %>
<% if(this.crud.hasCheckboxInputs()) { %>
use Filament\Forms\Components\Toggle;
<% } %>
<% if(this.crud.hasFileOrImageInputs()) { %>
use Filament\Forms\Components\FileUpload;
<% } %>
<% if(this.crud.hasTextareaInputs()) { %>
use Filament\Forms\Components\RichEditor;
<% } %>
<% if(this.crud.hasBelongsToInputs()) { %>
use Filament\Forms\Components\BelongsToSelect;
use Filament\Tables\Filters\MultiSelectFilter;
<% } %>
<% if(this.crud.model.hasTimestampFields()) { %>
use Illuminate\Database\Eloquent\Builder;
<% } %>
use Filament\Forms\Components\Grid;

class <$ this.crud.model.plural.case('pascalCase') $>RelationManager extends <$ this.relationshipType $>RelationManager
{
    protected static string $relationship = '<$ this.crud.model.plural.case('camelCase') $>';

    protected static ?string $recordTitleAttribute = '<$ this.crud.model.getLabelFieldName() $>';

    <% if(crudPluginData.isMasterDetail) { %>
    protected static bool $shouldRegisterNavigation = false;
    <% } %>

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Grid::make(['default' => 0])->schema([
                <% if(this.crud.inputs.length && crudPluginData.inputs) { %>
                    <# Crud inputs #>
                    <% for(let input of this.crud.inputs) { %>
                        <###>
                        <% let inputNeedsOptions = input.isSelect() && !input.isForRelationship() %>
                        <###>
                        <$ this.getTypeForFilament(input) $>::make('<$ input.name $>')
                        ->rules(<$ input.convertValidationToArrayForTemplate(input.validation) $>)
                        <###>
                        <% if(input.isNumeric()) { %>
                        ->numeric()
                        <% } %>
                        <###>
                        <% if(input.isForRelationship()) { %>
                        ->relationship('<$ input.relationship.name $>', '<$ input.relationship.model.getLabelFieldName() $>')
                        <% } %>
                        <###>
                        <% if(input.isEmail()) { %>
                        ->email()
                        <% } %>
                        <###>
                        <% if(input.isPassword()) { %>
                        ->password()
                        <% } %>
                        <###>
                        <% if(input.isUrl()) { %>
                        ->url()
                        <% } %>
                        <###>
                        <% if(input.isImage()) { %>
                        ->image()
                        <% } %>
                        <###>
                        <% if(input.isSelect()) { %>
                        ->searchable()
                        <% } %>
                        <###>
                        <% if(inputNeedsOptions) { %>
                        ->options([
                            <% for(let item of input.items) { %>
                                '<$ item.value $>' => '<$ item.label $>',
                            <% } %>
                        ])
                        <% } %>
                        <###>
                        <% if(input.placeholder && !input.isCheckbox()) { %>
                        ->placeholder('<$ input.placeholder $>')
                        <% } %>
                        <###>
                        <% if(input.defaultValue) { %>
                        ->default('<$ input.defaultValue $>')
                        <% } %>
                        ->columnSpan([
                            'default' => <$ input.cols $>,
                            'md' => <$ input.colsMedium $>,
                            'lg' => <$ input.colsLarge $>
                        ]),

                    <% } %>
                <% } %>
                ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                <% if(this.crudTableInputs.length) { %>
                    <% for(let inputTable of this.crudTableInputs) { %>
                        <###>
                        <% let inputTableName = inputTable.isForRelationship() ? this.getRelationshipInputName(inputTable) : inputTable.name %>
                        <% let inputTableNeedsLimit = inputTable.isText() || inputTable.isForRelationship() || inputTable.isEmail() %>
                        <###>
                        Tables\Columns\<$ this.getTableType(inputTable) $>::make('<$ inputTableName $>')
                        <###>
                        <% if(inputTable.isDatetime()) { %>
                            ->dateTime()
                        <% } %>
                        <###>
                        <% if(inputTable.isDate()) { %>
                            ->date()
                        <% } %>
                        <###>
                        <% if(inputTable.isImage()) { %>
                            ->rounded()
                        <% } %>
                        <###>
                        <% if(inputTableNeedsLimit) { %>
                            ->limit(50)
                        <% } %>,
                    <% } %>
                <% } %>
            ])
            ->filters([
                <% if(this.crud.model.hasTimestampFields()) { %>
                    <###>
                    Tables\Filters\Filter::make('created_at')
                        ->form([
                            Forms\Components\DatePicker::make('created_from'),
                            Forms\Components\DatePicker::make('created_until'),
                        ])
                        ->query(function (Builder $query, array $data): Builder {
                            return $query
                                ->when($data['created_from'], fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date))
                                ->when($data['created_until'], fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date));
                        }),

                <% } %>
                <% if(this.crud.hasBelongsToInputs()) { %>
                    <###>
                    <% for(let belongsToInput of this.crud.getBelongsToInputs()) { %>
                        <###>
                        <% let inputRelModel = belongsToInput.relationship.model %>
                        <###>
                        <% if(belongsToInput.isForRelationship()) { %>
                        MultiSelectFilter::make('<$ belongsToInput.name $>')->relationship('<$ inputRelModel.name.case('camelCase') $>', '<$ inputRelModel.getLabelFieldName() $>'),
                        <% } %>

                    <% } %>
                <% } %>
            ]);
    }
}
